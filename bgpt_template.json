{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "VPC with 2 AZs, each with 1 public and 1 private subnet, and NAT Gateways in public subnets.",
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "AZs": ["us-east-1a", "us-east-1b"]
      },
      "us-west-2": {
        "AZs": ["us-west-2a", "us-west-2b"]
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "BusGPT_VPC"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "BusGPT_InternetGateway"
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "AZs"
              ]
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicSubnet1"
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "AZs"
              ]
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicSubnet2"
          }
        ]
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.3.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "AZs"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateSubnet1"
          }
        ]
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.4.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "AZs"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateSubnet2"
          }
        ]
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicRouteTable"
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "NatEIP1": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NatEIP2": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NatGateway1": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": ["NatEIP1", "AllocationId"]
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "NatGateway1"
          }
        ]
      }
    },
    "NatGateway2": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": ["NatEIP2", "AllocationId"]
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "NatGateway2"
          }
        ]
      }
    },
    "PrivateRouteTable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateRouteTable1"
          }
        ]
      }
    },
    "PrivateRouteTable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateRouteTable2"
          }
        ]
      }
    },
    "PrivateRoute1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatGateway1"
        }
      }
    },
    "PrivateRoute2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable2"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatGateway2"
        }
      }
    },
    "PrivateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        }
      }
    },
    "PrivateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable2"
        }
      }
    }
  },
  "PublicSG": {
    "Type": "AWS::EC2::SecurityGroup",
    "Properties": {
      "VpcId": {
        "Ref": "VPC"
      },
      "GroupDescription": "Allow HTTP and SSH traffic",
      "SecurityGroupIngress": [
        {
          "IpProtocol": "tcp",
          "FromPort": 22,
          "ToPort": 22,
          "CidrIp": "0.0.0.0/0"
        },
        {
          "IpProtocol": "tcp",
          "FromPort": 80,
          "ToPort": 80,
          "CidrIp": "0.0.0.0/0"
        }
      ],
      "Tags": [
        {
          "Key": "Name",
          "Value": "PublicSG"
        }
      ]
    }
  },
  "PrivateSG": {
    "Type": "AWS::EC2::SecurityGroup",
    "Properties": {
      "VpcId": {
        "Ref": "VPC"
      },
      "GroupDescription": "Allow internal traffic",
      "SecurityGroupIngress": [
        {
          "IpProtocol": "tcp",
          "FromPort": 0,
          "ToPort": 65535,
          "CidrIp": "10.0.0.0/16"
        }
      ],
      "Tags": [
        {
          "Key": "Name",
          "Value": "PrivateSG"
        }
      ]
    }
  },
  "RDSInstance": {
    "Type": "AWS::RDS::DBInstance",
    "Properties": {
      "DBInstanceClass": "db.t3.micro",
      "AllocatedStorage": "20",
      "DBName": "BusGPT_Db",
      "Engine": "mysql",
      "MasterUsername": "admin",
      "MasterUserPassword": "P@ssword1234",
      "VPCSecurityGroups": [
        {
          "Ref": "PrivateSG"
        }
      ],
      "DBSubnetGroupName": {
        "Ref": "DBSubnetGroup"
      },
      "StorageEncrypted": true,
      "KmsKeyId": "arn:aws:kms:us-east-1:471112817312:key/30d9597f-33b4-400a-b5b9-61696ccc9745",
      "Tags": [
        {
          "Key": "Name",
          "Value": "RDSInstance"
        }
      ]
    }
  },
  "DBSubnetGroup": {
    "Type": "AWS::RDS::DBSubnetGroup",
    "Properties": {
      "DBSubnetGroupDescription": "Subnet group for RDS instance",
      "SubnetIds": [
        {
          "Ref": "PrivateSubnet1"
        },
        {
          "Ref": "PrivateSubnet2"
        }
      ],
      "Tags": [
        {
          "Key": "Name",
          "Value": "DBSubnetGroup"
        }
      ]
    }
  },
  "LambdaExecutionRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      },
      "Policies": [
        {
          "PolicyName": "LambdaPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "lex:PostText",
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface"
                ],
                "Resource": "*"
              }
            ]
          }
        }
      ],
      "Tags": [
        {
          "Key": "Name",
          "Value": "LambdaExecutionRole"
        }
      ]
    }
  },
  "LexLambdaFunction": {
    "Type": "AWS::Lambda::Function",
    "Properties": {
      "Handler": "index.handler",
      "Role": {
        "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
      },
      "Code": {
        "S3Bucket": "LamFuncBucket",
        "S3Key": "lex_output.zip"
      },
      "Runtime": "python3.8",
      "VpcConfig": {
        "SubnetIds": [
          {
            "Ref": "PrivateSubnet1"
          },
          {
            "Ref": "PrivateSubnet2"
          }
        ],
        "SecurityGroupIds": [
          {
            "Ref": "PrivateSG"
          }
        ]
      },
      "Tags": [
        {
          "Key": "Name",
          "Value": "LexLambdaFunction"
        }
      ]
    }
  },
  "LexServiceRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "lex.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      },
      "Policies": [
        {
          "PolicyName": "LexFullAccessPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "lex:*",
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": "*"
              }
            ]
          }
        }
      ],
      "Tags": [
        {
          "Key": "Name",
          "Value": "LexServiceRole"
        }
      ]
    }
  },
  "GetBusArrivalIntent": {
    "Type": "AWS::Lex::Intent",
    "Properties": {
      "Name": "GetBusArrivalTime",
      "Description": "Intent to get bus arrival time",
      "SampleUtterances": [
        "When is the bus arriving at {BusStop}?",
        "Is the bus arriving soon at {BusStop}?"
      ],
      "Slots": [
        {
          "Name": "BusStop",
          "SlotType": "AMAZON.City",
          "SlotConstraint": "Required",
          "ValueElicitationPrompt": {
            "Messages": [
              {
                "ContentType": "PlainText",
                "Content": "Which bus stop you are finding the arrival time for?"
              }
            ],
            "MaxAttempts": 2
          }
        }
      ],
      "FulfillmentActivity": {
        "Type": "CodeHook",
        "CodeHook": {
          "MessageVersion": "1.0",
          "Uri": {
            "Fn::GetAtt": ["APILambdaFunction", "Arn"]
          }
        }
      }
    }
  },
  "BusGPT": {
    "Type": "AWS::Lex::Bot",
    "Properties": {
      "Name": "BusGPT",
      "Description": "Bot for checking bus arrival times",
      "Intents": [
        {
          "IntentName": {
            "Ref": "GetBusArrivalIntent"
          },
          "IntentVersion": "$LATEST"
        }
      ],
      "Locale": "en-US",
      "ChildDirected": false,
      "IdleSessionTTLInSeconds": 300,
      "RoleArn": {
        "Fn::GetAtt": ["LexServiceRole", "Arn"]
      }
    }
  },
  "BusGPTAlias": {
    "Type": "AWS::Lex::BotAlias",
    "Properties": {
      "Name": "BusGPTAlias",
      "BotName": {
        "Ref": "BusGPT"
      },
      "BotVersion": "$LATEST"
    }
  },
  "APILambdaFunction": {
    "Type": "AWS::Lambda::Function",
    "Properties": {
      "Handler": "index.handler",
      "Role": {
        "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
      },
      "Code": {
        "S3Bucket": "LamFuncBucket",
        "S3Key": "lta_dynamic_api.zip"
      },
      "Runtime": "python3.8",
      "VpcConfig": {
        "SubnetIds": [
          {
            "Ref": "PrivateSubnet1"
          },
          {
            "Ref": "PrivateSubnet2"
          }
        ],
        "SecurityGroupIds": [
          {
            "Ref": "PrivateSG"
          }
        ]
      },
      "Tags": [
        {
          "Key": "Name",
          "Value": "APILambdaFunction"
        }
      ]
    }
  },
  "Outputs": {
    "VPCId": {
      "Description": "VPC ID",
      "Value": {
        "Ref": "VPC"
      }
    },
    "PublicSubnet1Id": {
      "Description": "Public Subnet 1 ID",
      "Value": {
        "Ref": "PublicSubnet1"
      }
    },
    "PublicSubnet2Id": {
      "Description": "Public Subnet 2 ID",
      "Value": {
        "Ref": "PublicSubnet2"
      }
    },
    "PrivateSubnet1Id": {
      "Description": "Private Subnet 1 ID",
      "Value": {
        "Ref": "PrivateSubnet1"
      }
    },
    "PrivateSubnet2Id": {
      "Description": "Private Subnet 2 ID",
      "Value": {
        "Ref": "PrivateSubnet2"
      }
    },
    "NatGateway1Id": {
      "Description": "NAT Gateway 1 ID",
      "Value": {
        "Ref": "NatGateway1"
      }
    },
    "NatGateway2Id": {
      "Description": "NAT Gateway 2 ID",
      "Value": {
        "Ref": "NatGateway2"
      }
    }
  }
}
