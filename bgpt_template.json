{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "VPC with 2 AZs, each with 1 public and 1 private subnet, NAT Gateways in public subnets, an RDS instance, and an EC2 instance for hosting a Python web app. Includes a Lex bot for checking bus arrival times.",
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "AZs": ["us-east-1a", "us-east-1b"],
        "AMI": "ami-0b0dcb5067f052a63"
      },
      "us-west-2": {
        "AZs": ["us-west-2a", "us-west-2b"],
        "AMI": "ami-0b0dcb5067f052a63"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "BusGPT_VPC"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "BusGPT_InternetGateway"
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "AZs"
              ]
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicSubnet1"
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "AZs"
              ]
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicSubnet2"
          }
        ]
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.3.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "AZs"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateSubnet1"
          }
        ]
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.4.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "AZs"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateSubnet2"
          }
        ]
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicRouteTable"
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PrivateRouteTable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateRouteTable1"
          }
        ]
      }
    },
    "PrivateRouteTable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateRouteTable2"
          }
        ]
      }
    },
    "PrivateRoute1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NatInstance1"
        }
      }
    },
    "PrivateRoute2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable2"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NatInstance2"
        }
      }
    },
    "PrivateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        }
      }
    },
    "PrivateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable2"
        }
      }
    },
    "PublicSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Allow HTTP and SSH traffic",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 1024,
            "ToPort": 65535,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicSG"
          }
        ]
      }
    },
    "PrivateSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Allow internal traffic",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 0,
            "ToPort": 65535,
            "CidrIp": "10.0.0.0/16"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateSG"
          }
        ]
      }
    },
    "NatInstance1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t3.micro",
        "SourceDestCheck": "false",
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "KeyName": "BGPTKeyPair",
        "SecurityGroupIds": [
          {
            "Ref": "PublicSG"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "NatInstance1"
          }
        ]
      }
    },
    "NatInstance2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t3.micro",
        "SourceDestCheck": "false",
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "KeyName": "BGPTKeyPair",
        "SecurityGroupIds": [
          {
            "Ref": "PublicSG"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "NatInstance2"
          }
        ]
      }
    },
    "BusGPTInstance1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t3.micro",
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "KeyName": "BGPTKeyPair",
        "SecurityGroupIds": [
          {
            "Ref": "PrivateSG"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "BusGPTInstance1"
          }
        ]
      }
    },
    "BusGPTInstance2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t3.micro",
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "KeyName": "BGPTKeyPair",
        "SecurityGroupIds": [
          {
            "Ref": "PrivateSG"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "BusGPTInstance2"
          }
        ]
      }
    },
    "RDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBInstanceClass": "db.t3.micro",
        "AllocatedStorage": "20",
        "DBName": "BusGPT_Db",
        "Engine": "mysql",
        "MasterUsername": "admin",
        "MasterUserPassword": "P@ssword1234",
        "VPCSecurityGroups": [
          {
            "Ref": "PrivateSG"
          }
        ],
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "StorageEncrypted": true,
        "KmsKeyId": "arn:aws:kms:us-east-1:471112817312:key/30d9597f-33b4-400a-b5b9-61696ccc9745",
        "Tags": [
          {
            "Key": "Name",
            "Value": "RDSInstance"
          }
        ]
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnet group for RDS instance",
        "SubnetIds": [
          {
            "Ref": "PrivateSubnet1"
          },
          {
            "Ref": "PrivateSubnet2"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "DBSubnetGroup"
          }
        ]
      }
    },
    "LexServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lex.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LexFullAccessPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lex:*",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "Lex_Lambda_Policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "LexServiceRole"
          }
        ]
      }
    },
    "GetBusArrivalIntent": {
      "Type": "AWS::Lex::Intent",
      "Properties": {
        "Name": "GetBusArrivalTime",
        "Description": "Intent to get bus arrival time",
        "SampleUtterances": [
          "When is the bus arriving at {BusStop}?",
          "Is the bus arriving soon at {BusStop}?"
        ],
        "Slots": [
          {
            "Name": "BusStop",
            "SlotType": "AMAZON.City",
            "SlotConstraint": "Required",
            "ValueElicitationPrompt": {
              "Messages": [
                {
                  "ContentType": "PlainText",
                  "Content": "Which bus stop you are finding the arrival time for?"
                }
              ],
              "MaxAttempts": 2
            }
          }
        ],
        "FulfillmentActivity": {
          "Type": "CodeHook",
          "CodeHook": {
            "MessageVersion": "1.0",
            "Uri": {
              "Fn::GetAtt": ["APILambdaFunction", "Arn"]
            }
          }
        }
      }
    },
    "BusGPT": {
      "Type": "AWS::Lex::Bot",
      "Properties": {
        "Name": "BusGPT",
        "Description": "Bot for checking bus arrival times",
        "Intents": [
          {
            "IntentName": {
              "Ref": "GetBusArrivalIntent"
            },
            "IntentVersion": "$LATEST"
          }
        ],
        "Locale": "en-US",
        "ChildDirected": false,
        "IdleSessionTTLInSeconds": 300,
        "RoleArn": {
          "Fn::GetAtt": ["LexServiceRole", "Arn"]
        }
      }
    },
    "BusGPTAlias": {
      "Type": "AWS::Lex::BotAlias",
      "Properties": {
        "Name": "BusGPTAlias",
        "BotName": {
          "Ref": "BusGPT"
        },
        "BotVersion": "$LATEST"
      }
    }
  },
  "Outputs": {
    "VPCId": {
      "Description": "VPC ID",
      "Value": {
        "Ref": "VPC"
      }
    },
    "PublicSubnet1Id": {
      "Description": "Public Subnet 1 ID",
      "Value": {
        "Ref": "PublicSubnet1"
      }
    },
    "PublicSubnet2Id": {
      "Description": "Public Subnet 2 ID",
      "Value": {
        "Ref": "PublicSubnet2"
      }
    },
    "PrivateSubnet1Id": {
      "Description": "Private Subnet 1 ID",
      "Value": {
        "Ref": "PrivateSubnet1"
      }
    },
    "PrivateSubnet2Id": {
      "Description": "Private Subnet 2 ID",
      "Value": {
        "Ref": "PrivateSubnet2"
      }
    },
    "BusGPTInstance1Id": {
      "Description": "BusGPT Instance 1 ID",
      "Value": {
        "Ref": "BusGPTInstance1"
      }
    },
    "BusGPTInstance2Id": {
      "Description": "BusGPT Instance 2 ID",
      "Value": {
        "Ref": "BusGPTInstance2"
      }
    }
  }
}
